# -*- coding: utf-8 -*-
#
#  action.yml

name: "Build ISO"
description: "Builds a Custom ISO image for BigCommunity/BigLinux"

inputs:
  distroname:
    description: "Distribution name"
    required: true
  
  iso_profiles_repo:
    description: "ISO profiles repository URL"
    required: true
  
  edition:
    description: "ISO profile edition"
    required: true
  
  community_branch:
    description: "Community branch"
    required: false
  
  biglinux_branch:
    description: "BigLinux branch"
    required: true
  
  manjaro_branch:
    description: "Manjaro branch"
    required: false
    default: "stable"
  
  kernel:
    description: "Kernel version"
    required: true
  
  release_tag:
    description: "Release tag"
    required: true
  
  tmate:
    description: "Enable tmate debugging"
    required: false
    default: false
  
  github_token:
    description: "GitHub token"
    required: true

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Define terminal utility functions
      shell: bash
      run: |
        cat << 'EOF' > /tmp/terminal_utils.sh
        export TERM=${TERM:-xterm-256color}

        # Color definitions
        blueDark="\e[1;38;5;33m"
        lightBlue="\e[1;38;5;39m"
        cyan="\e[1;38;5;45m"
        white="\e[1;97m"
        reset="\e[0m"
        red="\e[1;31m"
        green="\e[1;32m"

        die() {
          local msg="$(sed 's/<[^>]*>//g' <<< "$1")"
          echo -e "BP=>${red}error: ${white}${msg}${reset}"
          exit 1
        }
        export -f die

        msg() {
          local msg="$(sed 's/<[^>]*>//g' <<< "$1")"
          echo -e "BP=>${blueDark}[${lightBlue}RUNNING${blueDark}]${reset} ${cyan}â†’${reset} ${white}${msg}${reset}"
        }
        export -f msg

        msg_ok() {
          local msg="$(sed 's/<[^>]*>//g' <<< "$1")"
          echo -e "BP=>${blueDark}[${green}SUCCESS${blueDark}]${reset} ${cyan}â†’${reset} ${white}${msg}${reset}"
        }
        export -f msg_ok

        msg_info() {
          local msg="$(sed 's/<[^>]*>//g' <<< "$1")"
          echo -e "BP=>${blueDark}[${cyan}INFO${blueDark}]${reset} ${cyan}â†’${reset} ${white}${msg}${reset}"
        }
        export -f msg_info

        msg_run() {
          echo -e "BP=>${blueDark}[${lightBlue}COMMAND${blueDark}]${reset} ${cyan}â†’${reset} ${white}$1${reset}"
          eval "$1"
        }
        export -f msg_run

        replicate() {
          local char=${1:-'#'}
          local nsize=${2:-$(tput cols)}
          local line
          printf -v line "%*s" "$nsize" && echo -e "${blueDark}${line// /$char}${reset}"
        }
        export -f replicate

        send_telegram_message() {
          local message="$1"
          echo -e "${red}ERROR: $(sed 's/<[^>]*>//g' <<< "$message")${reset}"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${message}" \
            -d parse_mode="HTML"
        }
        export -f send_telegram_message
        EOF

    - name: Display system information
      shell: bash
      run: |
        source /tmp/terminal_utils.sh
        replicate '='
        msg_info "Current host: $(hostname)"
        msg_info "Current user: $(whoami) [$(id -u)]"
        msg_info "User details: $(id)"
        replicate '='
        msg_run "df -hT || true"
        replicate '='
        msg_run "ls -la /mnt || true"
        replicate '='

    - name: Setup build environment
      shell: bash
      run: |
        source /tmp/terminal_utils.sh
        
        # Setup build environment
        msg "Setting up build packages"
        
        # Add community repository if needed
        if [[ "${{ inputs.distroname }}" == 'bigcommunity' ]]; then
          msg_info "Adding community-extra repository"
          {
            echo "[community-extra]"
            echo "SigLevel = PackageRequired"
            echo "Server = https://repo.communitybig.org/extra/\$arch"
            echo
          } | sudo tee -a /etc/pacman.conf > /dev/null
        fi
        
        # Setup cryptographic keys
        msg "Setting up cryptographic keys"
        git clone https://github.com/biglinux/biglinux-key.git
        sudo install -dm755 /etc/pacman.d/gnupg/
        sudo install -m0644 biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
        sudo rm -r biglinux-key
        
        if [[ "${{ inputs.distroname }}" == 'bigcommunity' ]]; then
          git clone https://github.com/big-comm/community-keyring.git
          sudo install -m0644 community-keyring/community.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 community-keyring/community-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 community-keyring/community-revoked /usr/share/pacman/keyrings/
          sudo rm -r community-keyring
        fi
        
        # Initialize keys
        sudo pacman-key --init
        sudo pacman-key --populate
        sudo pacman -Sy --quiet --noconfirm
        
        # Adjust mkinitcpio hooks
        msg "Adjusting mkinitcpio hooks"
        sudo sed -i -e 's/File/Path/' /usr/share/libalpm/hooks/*hook*
        
        # Create device node
        msg "Creating device node /dev/sr0"
        sudo mknod /dev/sr0 b 11 0 || true
        sudo chmod 660 /dev/sr0 || true
        sudo chown root:root /dev/sr0 || true

    - name: Set environment variables
      shell: bash
      run: |
        source /tmp/terminal_utils.sh
        msg "Setting environment variables"
        
        # Determine distroname for ISO profiles
        DISTRONAME_ISOPROFILES="${{ inputs.distroname }}"
        
        # Write environment variables
        {
          echo "USERNAME=builduser"
          echo "HOME_FOLDER=/home/builduser"
          echo "ISO_PROFILES_REPO=${{ inputs.iso_profiles_repo }}"
          echo "EDITION=${{ inputs.edition }}"
          echo "WORK_PATH=/__w/build-iso/build-iso"
          echo "WORK_PATH_ISO_PROFILES=/__w/build-iso/build-iso/iso-profiles"
          echo "DISTRONAME=${{ inputs.distroname }}"
          echo "DISTRONAME_ISOPROFILES=$DISTRONAME_ISOPROFILES"
          echo "PROFILE_PATH=/__w/build-iso/build-iso/iso-profiles/${DISTRONAME_ISOPROFILES}"
          echo "PROFILE_PATH_EDITION=/__w/build-iso/build-iso/iso-profiles/${DISTRONAME_ISOPROFILES}/${{ inputs.edition }}"
          echo "PATH_MANJARO_ISO_PROFILES=/usr/share/manjaro-tools/iso-profiles"
          echo "PATH_MANJARO_TOOLS=/usr/share/manjaro-tools"
          echo "VAR_CACHE_MANJARO_TOOLS=/var/cache/manjaro-tools"
          echo "VAR_CACHE_MANJARO_TOOLS_ISO=/var/cache/manjaro-tools/iso"
          echo "DEBUG=${{ inputs.tmate }}"
          echo "MANJARO_BRANCH=${{ inputs.manjaro_branch }}"
          echo "BIGCOMMUNITY_BRANCH=${{ inputs.community_branch }}"
          echo "BIGLINUX_BRANCH=${{ inputs.biglinux_branch }}"
          echo "KERNEL=${{ inputs.kernel }}"
          echo "RELEASE_TAG=${{ inputs.release_tag }}"
          echo "SCOPE=full"
          echo "OFFICE=false"
        } >> "$GITHUB_ENV"

    - name: Build ISO
      id: build
      shell: bash
      run: |
        source /tmp/terminal_utils.sh
        msg "Starting ISO build process"
        
        # Execute the existing build-iso.sh script directly
        chmod +x ./build-iso.sh
        ./build-iso.sh
        
        # Check exit code
        BUILD_EXIT_CODE=$?
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          # Send failure notification
          link_action="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          
          FAILURE_MESSAGE="ðŸš¨ <b>ISO BUILD FAILED:</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Distribution:</b> <code>${DISTRONAME}</code>
          <b>Edition:</b> <code>${EDITION}</code>
          <b>Error URL:</b> <a href='${link_action}'>${link_action}</a>
          <b>Exit Code:</b> <code>${BUILD_EXIT_CODE}</code>"
          
          send_telegram_message "$FAILURE_MESSAGE" "HTML"
          die "ISO build failed with exit code ${BUILD_EXIT_CODE}"
        fi
        
        msg_ok "ISO build completed successfully"

    - name: Setup tmate session for debugging
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.tmate == true }}
      with:
        install-dependencies: false
        detached: true

    - name: Set ISO path for output
      shell: bash
      run: |
        source /tmp/terminal_utils.sh
        msg "Setting ISO path for output"
        echo "ISO_PATH=$WORK_PATH/$ISO_BASENAME" >> $GITHUB_ENV
        msg_ok "ISO path set to: $WORK_PATH/$ISO_BASENAME"