# -*- coding: utf-8 -*-
#
#  action.yml

name: "Build ISO"
description: "Builds a Custom ISO image for BigCommunity/BigLinux"

inputs:
  distroname:
    type: choice
    description: "Distribution name for the ISO"
    required: true
    options:
      - bigcommunity
      - biglinux
    default: "bigcommunity"
  
  iso_profiles_repo:
    type: choice
    description: "ISO profiles repository"
    required: true
    options:
      - "https://github.com/big-comm/iso-profiles"
      - "https://github.com/biglinux/iso-profiles"
      - "https://github.com/talesam/iso-profiles"
    default: "https://github.com/big-comm/iso-profiles"
  
  iso_profiles_branch:
    description: "Branch of the ISO profiles repository (optional)"
    required: false
  
  edition:
    description: "Name of the ISO profile to build"
    required: true
  
  community_branch:
    description: "Community branch (stable, testing)"
    required: false
  
  biglinux_branch:
    description: "BigLinux branch (stable, testing)"
    required: true
  
  manjaro_branch:
    description: "Manjaro branch (stable, testing, unstable)"
    required: false
    default: "stable"
  
  scope:
    description: "Build scope (full or minimal)"
    required: false
    default: "full"
  
  kernel:
    description: "Kernel version (latest, lts, oldLts, xanmod)"
    required: true
  
  release_tag:
    description: "Release tag for the ISO"
    required: true
  
  tmate:
    description: "Enable debugging with tmate"
    required: false
    default: false
  
  office-chooser:
    description: "Include office suite"
    required: false
    default: "false"
  
  telegram_token:
    description: "Token for Telegram notifications"
    required: false
  
  telegram_chat_id:
    description: "Chat ID for Telegram notifications"
    required: false
  
  github_token:
    description: "GitHub token for authentication"
    required: true
  
  start_time:
    description: "Workflow start time"
    required: false
  
  start_timestamp:
    description: "Workflow start timestamp"
    required: false

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Define send_telegram_message function in temporary script
      shell: bash
      env:
        TELEGRAM_TOKEN: "${{ inputs.telegram_token }}"
        TELEGRAM_CHAT_ID: "${{ inputs.telegram_chat_id }}"
      run: |
        # Define send_telegram_message function in temporary script
        cat << 'EOF' > /tmp/send_telegram_message.sh
        export TERM=${TERM:-xterm}
        export TERM=${TERM:-xterm-256color}

        # Color definitions for status messages
        blueDark="\e[1;38;5;33m"     # Bold dark blue
        mediumBlue="\e[1;38;5;32m"   # Bold medium blue
        lightBlue="\e[1;38;5;39m"    # Bold light blue
        cyan="\e[1;38;5;45m"         # Bold cyan
        white="\e[1;97m"             # Bold white
        reset="\e[0m"                # Reset text formatting

        # Additional colors for warnings/errors
        red="\e[1;31m"               # Bold red for errors
        yellow="\e[1;33m"            # Bold yellow for warnings
        green="\e[1;32m"             # Bold green for success
        
        alias ls='ls -lha --color=auto'
        alias dir='ls -lha --color=auto'

        die() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove HTML tags
          echo -e "BP=>${red}error: ${white}${msg}${reset}"
          exit 1
        }
        export -f die

        msg_raw() {
          local msg="$1"
          # Remove HTML tags if they exist
          #msg="$(sed 's/<[^>]*>//g' <<< "$msg")"

          # Check if message contains ':'
          if [[ "$msg" == *:* ]]; then
            # Split string before and after first ':'
            local before_colon="${msg%%:*}:"
            local after_colon="${msg#*: }"
            # Apply colors
            msg="${mediumBlue}${before_colon} ${white}${after_colon}${reset}"
          else
            # If no ':', apply default color
            msg="${mediumBlue}${msg}${reset}"
          fi
          echo -e "$msg"
        }
        export -f msg_raw

        msg() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove HTML tags
          echo -e "BP=>${blueDark}[${lightBlue}RUNNING${blueDark}]${reset} ${cyan}→${reset} ${white}${msg}${reset}"
        }
        export -f msg

        msg_ok() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove HTML tags
          echo -e "BP=>${blueDark}[${green}SUCCESS${blueDark}]${reset} ${cyan}→${reset} ${white}${msg}${reset}"
        }
        export -f msg_ok

        msg_run() {
          local msg="$1"
          echo -e "BP=>${blueDark}[${lightBlue}COMMAND${blueDark}]${reset} ${cyan}→${reset} ${white}${msg}${reset}"
          eval "$msg"
        }
        export -f msg_run

        msg_info() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove HTML tags
          echo -e "BP=>${blueDark}[${cyan}INFO${blueDark}]${reset} ${cyan}→${reset} ${white}${msg}${reset}"
        }
        export -f msg_info

        msg_warning() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove HTML tags
          echo -e "BP=>${blueDark}[${yellow}WARNING${blueDark}]${reset} ${cyan}→${reset} ${white}${msg}${reset}"
        }
        export -f msg_warning

        replicate() {
          local char=${1:-'#'}
          local nsize=${2:-$(tput cols)}
          local line
          printf -v line "%*s" "$nsize" && echo -e "${blueDark}${line// /$char}${reset}"
        }
        export -f replicate

        send_telegram_message() {
          local message="$1"
          local parse_mode="$2"

          # Set parse_mode as "HTML" if not specified
          [[ -z $parse_mode ]] && parse_mode="HTML"

          # Remove HTML tags and display result in terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$message")${reset}"
          
          # Send original message with HTML to Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
            -d chat_id="${{ inputs.telegram_chat_id }}" \
            -d text="$message" \
            -d parse_mode="$parse_mode"
        }
        export -f send_telegram_message
        EOF

    - name: Display system information
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        replicate '='
        msg_info "Current host: $(hostname)"
        msg_info "Current user: $(whoami) [$(id -u)]"
        msg_info "User details: $(id)"
        replicate '='
        msg_run "df -hT || true"
        replicate '='
        msg_run "ls -la /mnt || true"
        replicate '='

    - name: Send start notification
      shell: bash
      env:
        GITHUB_RUN_NUMBER: "${{ github.run_number }}"
        GITHUB_REPOSITORY: "${{ github.repository }}"
        GITHUB_RUN_ID: "${{ github.run_id }}"
        GITHUB_ACTOR: "${{ github.actor }}"
      run: |
        source /tmp/send_telegram_message.sh
        
        link_action="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
        current_time=$(date "+%Y-%m-%d %H:%M:%S")
        
        MESSAGE="🚀 <b>[step 1/3] build-iso - STARTING WORKFLOW</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Job URL:</b> <a href='${link_action}'>${link_action}</a>
        <b>Workflow:</b> <code>build-iso/action.yml</code>
        <b>Started by:</b> <code>${GITHUB_ACTOR}</code>
        <b>Start time:</b> <code>${current_time}</code>
        <b>Distribution:</b> <code>${DISTRONAME}</code>
        <b>ISO Profile:</b> <code>${ISO_PROFILES_REPO}</code>
        <b>Edition:</b> <code>${EDITION}</code>
        <b>Manjaro Branch:</b> <code>${MANJARO_BRANCH}</code>
        <b>BigLinux Branch:</b> <code>${BIGLINUX_BRANCH}</code>
        <b>Community Branch:</b> <code>${BIGCOMMUNITY_BRANCH}</code>
        <b>Kernel:</b> <code>${KERNEL}</code>"
        
        send_telegram_message "$MESSAGE" "HTML"

    - name: Setup build environment
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        
        # Setup build environment
        msg "Setting up build packages"
        
        # Add community repository if needed
        if [[ "${{ inputs.distroname }}" == 'bigcommunity' ]]; then
          msg_info "Adding community-extra repository"
          {
            echo "[community-extra]"
            echo "SigLevel = PackageRequired"
            echo "Server = https://repo.communitybig.org/extra/\$arch"
            echo
          } | sudo tee -a /etc/pacman.conf > /dev/null
        fi
        
        # Setup cryptographic keys
        msg "Setting up cryptographic keys"
        git clone https://github.com/biglinux/biglinux-key.git
        sudo install -dm755 /etc/pacman.d/gnupg/
        sudo install -m0644 biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
        sudo rm -r biglinux-key
        
        if [[ "${{ inputs.distroname }}" == 'bigcommunity' ]]; then
          git clone https://github.com/big-comm/community-keyring.git
          sudo install -m0644 community-keyring/community.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 community-keyring/community-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 community-keyring/community-revoked /usr/share/pacman/keyrings/
          sudo rm -r community-keyring
        fi
        
        # Initialize keys
        sudo pacman-key --init
        sudo pacman-key --populate
        sudo pacman -Sy --quiet --noconfirm
        
        # Adjust mkinitcpio hooks
        msg "Adjusting mkinitcpio hooks"
        sudo sed -i -e 's/File/Path/' /usr/share/libalpm/hooks/*hook*
        
        # Create device node
        msg "Creating device node /dev/sr0"
        sudo mknod /dev/sr0 b 11 0 || true
        sudo chmod 660 /dev/sr0 || true
        sudo chown root:root /dev/sr0 || true

    - name: Setup tmate session for debugging
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event.client_payload.tmate == true || inputs.tmate == true}}
      with:
        install-dependencies: false
        detached: true

    - name: Set environment variables
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        msg "Setting environment variables"
        
        # Determine distroname for ISO profiles
        DISTRONAME_ISOPROFILES="${{ inputs.distroname }}"
        
        # Write environment variables
        {
          echo "USERNAME=builduser"
          echo "HOME_FOLDER=/home/builduser"
          echo "ISO_PROFILES_REPO=${{ inputs.iso_profiles_repo }}"
          echo "EDITION=${{ inputs.edition }}"
          echo "WORK_PATH=/__w/build-iso/build-iso"
          echo "WORK_PATH_ISO_PROFILES=/__w/build-iso/build-iso/iso-profiles"
          echo "DISTRONAME=${{ inputs.distroname }}"
          echo "DISTRONAME_ISOPROFILES=$DISTRONAME_ISOPROFILES"
          echo "PROFILE_PATH=/__w/build-iso/build-iso/iso-profiles/${DISTRONAME_ISOPROFILES}"
          echo "PROFILE_PATH_EDITION=/__w/build-iso/build-iso/iso-profiles/${DISTRONAME_ISOPROFILES}/${{ inputs.edition }}"
          echo "PATH_MANJARO_ISO_PROFILES=/usr/share/manjaro-tools/iso-profiles"
          echo "PATH_MANJARO_TOOLS=/usr/share/manjaro-tools"
          echo "VAR_CACHE_MANJARO_TOOLS=/var/cache/manjaro-tools"
          echo "VAR_CACHE_MANJARO_TOOLS_ISO=/var/cache/manjaro-tools/iso"
          echo "DEBUG=${{ inputs.tmate }}"
          echo "MANJARO_BRANCH=${{ inputs.manjaro_branch }}"
          echo "BIGCOMMUNITY_BRANCH=${{ inputs.community_branch }}"
          echo "BIGLINUX_BRANCH=${{ inputs.biglinux_branch }}"
          echo "KERNEL=${{ inputs.kernel }}"
          echo "RELEASE_TAG=${{ inputs.release_tag }}"
          echo "SCOPE=${{ inputs.scope }}"
          echo "OFFICE=${{ inputs.office-chooser }}"
        } >> "$GITHUB_ENV"

    - name: Send preparation notification
      shell: bash
      env:
        GITHUB_RUN_NUMBER: "${{ github.run_number }}"
      run: |
        source /tmp/send_telegram_message.sh
        
        current_time=$(date "+%Y-%m-%d %H:%M:%S")
        
        MESSAGE="⏳ <b>[step 2/3] Preparing ISO for build</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-iso/action.yml</code>
        <b>Start time:</b> <code>${current_time}</code>
        <b>Distribution:</b> <code>${DISTRONAME}</code>
        <b>Edition:</b> <code>${EDITION}</code>"
        
        send_telegram_message "$MESSAGE" "HTML"

    - name: Build ISO
      id: build
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        msg "Starting ISO build process"
        
        # Execute the existing build-iso.sh script directly
        chmod +x ./build-iso.sh
        ./build-iso.sh --automatic
        
        # Check exit code
        BUILD_EXIT_CODE=$?
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          # Send failure notification
          link_action="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          
          FAILURE_MESSAGE="🚨 <b>ISO BUILD FAILED:</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Distribution:</b> <code>${DISTRONAME}</code>
          <b>Edition:</b> <code>${EDITION}</code>
          <b>Error URL:</b> <a href='${link_action}'>${link_action}</a>
          <b>Exit Code:</b> <code>${BUILD_EXIT_CODE}</code>"
          
          send_telegram_message "$FAILURE_MESSAGE" "HTML"
          die "ISO build failed with exit code ${BUILD_EXIT_CODE}"
        fi
        
        msg_ok "ISO build completed successfully"

    - name: Setup tmate session for debugging
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event.client_payload.tmate == true || inputs.tmate == true}}
      with:
        install-dependencies: false
        detached: true

    - name: Set ISO path for output
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        msg "Setting ISO path for output"
        echo "ISO_PATH=$WORK_PATH/$ISO_BASENAME" >> $GITHUB_ENV
        msg_ok "ISO path set to: $WORK_PATH/$ISO_BASENAME"

    - name: Send completion notification
      shell: bash
      env:
        GITHUB_RUN_NUMBER: "${{ github.run_number }}"
        GITHUB_REPOSITORY: "${{ github.repository }}"
        GITHUB_RUN_ID: "${{ github.run_id }}"
      run: |
        source /tmp/send_telegram_message.sh
        
        # Use the values calculated in edition.yml if available
        duration_formatted="${{ env.duration_formatted }}"
        iso_size="${{ env.iso_size }}"
        artifact_url="${{ env.artifact_url }}"
        FILE_NAME="${{ steps.prepare-iso.outputs.release_name }}"
        
        # Fallbacks if variables aren't available
        if [ -z "$duration_formatted" ]; then
          # Calculate build duration
          if [ -n "${{ inputs.start_timestamp }}" ]; then
            start_timestamp=${{ inputs.start_timestamp }}
          else
            start_timestamp=$(($(date +%s) - 3600))
          fi
          
          end_timestamp=$(date +%s)
          duration=$((end_timestamp - start_timestamp))
          hours=$((duration / 3600))
          minutes=$(((duration % 3600) / 60))
          seconds=$((duration % 60))
          
          # Format values
          hours=$(printf "%02d" $hours)
          minutes=$(printf "%02d" $minutes)
          seconds=$(printf "%02d" $seconds)
          
          duration_formatted="${hours}h ${minutes}m ${seconds}s"
        fi
        
        # Fallback for file size
        if [ -z "$iso_size" ]; then
          if [ -f "$ISO_PATH" ]; then
            iso_size=$(du -h "$ISO_PATH" | cut -f1)
          else
            iso_size="unknown"
          fi
        fi
        
        END_TIME=$(date +"%Y-%m-%d %H:%M:%S")
        
        # Build download link part if available
        download_link=""
        if [ -n "$artifact_url" ] && [ -n "$FILE_NAME" ]; then
          download_link="<b>Download:</b> <a href='${artifact_url}'>${FILE_NAME}.zip</a>"
        fi
        
        MESSAGE="✅ <b>[step 3/3] Job completed in:</b> <code>${duration_formatted}</code>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-iso/action.yml</code>
        <b>End time:</b> <code>${END_TIME}</code>
        <b>ISO Name:</b> <code>${ISO_BASENAME}</code>
        <b>ISO Size:</b> <code>${iso_size}</code>
        <b>Distribution:</b> <code>${DISTRONAME}</code>
        <b>Edition:</b> <code>${EDITION}</code>
        <b>Kernel:</b> <code>${KERNEL}</code>
        ${download_link}"
        
        send_telegram_message "$MESSAGE" "HTML"